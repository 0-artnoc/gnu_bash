*** ../bash-4.0-patched/bashline.c	2009-01-08 09:29:24.000000000 -0500
--- bashline.c	2009-07-16 14:13:41.000000000 -0400
***************
*** 1387,1391 ****
    /* If the word starts in `~', and there is no slash in the word, then
       try completing this word as a username. */
!   if (!matches && *text == '~' && !xstrchr (text, '/'))
      matches = rl_completion_matches (text, rl_username_completion_function);
  
--- 1387,1391 ----
    /* If the word starts in `~', and there is no slash in the word, then
       try completing this word as a username. */
!   if (matches ==0 && *text == '~' && mbschr (text, '/') == 0)
      matches = rl_completion_matches (text, rl_username_completion_function);
  
***************
*** 2667,2675 ****
    local_dirname = *dirname;
  
!   if (xstrchr (local_dirname, '$'))
      should_expand_dirname = 1;
    else
      {
!       t = xstrchr (local_dirname, '`');
        if (t && unclosed_pair (local_dirname, strlen (local_dirname), "`") == 0)
  	should_expand_dirname = 1;
--- 2667,2675 ----
    local_dirname = *dirname;
  
!   if (mbschr (local_dirname, '$'))
      should_expand_dirname = 1;
    else
      {
!       t = mbschr (local_dirname, '`');
        if (t && unclosed_pair (local_dirname, strlen (local_dirname), "`") == 0)
  	should_expand_dirname = 1;
***************
*** 3226,3230 ****
  	  *r++ = *++p;
  	  if (*p == '\0')
! 	    break;
  	  continue;
  	}
--- 3226,3230 ----
  	  *r++ = *++p;
  	  if (*p == '\0')
! 	    return ret;		/* XXX - was break; */
  	  continue;
  	}
***************
*** 3272,3276 ****
        /* OK, we have an unquoted character.  Check its presence in
  	 rl_completer_word_break_characters. */
!       if (xstrchr (rl_completer_word_break_characters, *s))
  	*r++ = '\\';
        /* XXX -- check for standalone tildes here and backslash-quote them */
--- 3272,3276 ----
        /* OK, we have an unquoted character.  Check its presence in
  	 rl_completer_word_break_characters. */
!       if (mbschr (rl_completer_word_break_characters, *s))
  	*r++ = '\\';
        /* XXX -- check for standalone tildes here and backslash-quote them */
***************
*** 3314,3318 ****
       quoted correctly using backslashes (a backslash-newline pair is
       special to the shell parser). */
!   if (*qcp == '\0' && cs == COMPLETE_BSQUOTE && xstrchr (s, '\n'))
      cs = COMPLETE_SQUOTE;
    else if (*qcp == '"')
--- 3314,3318 ----
       quoted correctly using backslashes (a backslash-newline pair is
       special to the shell parser). */
!   if (*qcp == '\0' && cs == COMPLETE_BSQUOTE && mbschr (s, '\n'))
      cs = COMPLETE_SQUOTE;
    else if (*qcp == '"')
***************
*** 3322,3330 ****
  #if defined (BANG_HISTORY)
    else if (*qcp == '\0' && history_expansion && cs == COMPLETE_DQUOTE &&
! 	   history_expansion_inhibited == 0 && xstrchr (s, '!'))
      cs = COMPLETE_BSQUOTE;
  
    if (*qcp == '"' && history_expansion && cs == COMPLETE_DQUOTE &&
! 	history_expansion_inhibited == 0 && xstrchr (s, '!'))
      {
        cs = COMPLETE_BSQUOTE;
--- 3322,3330 ----
  #if defined (BANG_HISTORY)
    else if (*qcp == '\0' && history_expansion && cs == COMPLETE_DQUOTE &&
! 	   history_expansion_inhibited == 0 && mbschr (s, '!'))
      cs = COMPLETE_BSQUOTE;
  
    if (*qcp == '"' && history_expansion && cs == COMPLETE_DQUOTE &&
! 	history_expansion_inhibited == 0 && mbschr (s, '!'))
      {
        cs = COMPLETE_BSQUOTE;
***************
*** 3389,3393 ****
    register int i;
    intmax_t mi;
-   int save_point;
    sh_parser_state_t ps;
    char *cmd, *value, *l;
--- 3389,3392 ----
***************
*** 3433,3437 ****
      VSETATTR (v, att_exported);
    l = value_cell (v);
-   save_point = rl_point;
    value = inttostr (rl_point, ibuf, sizeof (ibuf));
    v = bind_int_variable ("READLINE_POINT", value);
--- 3432,3435 ----
***************
*** 3451,3455 ****
      {
        i = mi;
!       if (i != save_point)
  	{
  	  rl_point = i;
--- 3449,3453 ----
      {
        i = mi;
!       if (i != rl_point)
  	{
  	  rl_point = i;
